steps:
- name: 'node:latest'
  id: Perform Unit Tests
  entrypoint: /bin/sh
  args:
  - -c
  - 'cd ${_APP_DIR} && npm install && npm test'
  
- name: 'gcr.io/cloud-builders/docker'
  id: Build Docker Image
  args:
  - 'build'
  - '-t'
  - 'gcr.io/$PROJECT_ID/${_IMAGE_ID}:$SHORT_SHA'
  - '${_APP_DIR}/'

- name: 'gcr.io/cloud-builders/docker'
  id: Push Built Docker Image to GCR
  args:
  - 'push'
  - 'gcr.io/$PROJECT_ID/${_IMAGE_ID}:$SHORT_SHA'

# manifest for staging
- name: 'gcr.io/cloud-builders/gcloud'
  id: Generate deployment manifest for staging environment
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    cd ${_APP_DIR} && \
    sed "s/IMAGE_TO_DEPLOY/gcr.io\/${PROJECT_ID}\/${_IMAGE_ID}:${SHORT_SHA}/g" ${_STAGING_KUBERENETES_TEMPLATE_FILE_NAME} > ${_STAGING_KUBERNETES_CONFIG_FILE_NAME}
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Staging deployment
- name: 'gcr.io/cloud-builders/kubectl'
  id: Deploy to Staging
  args:
  - 'apply'
  - '-f'
  - '${_APP_DIR}/${_STAGING_KUBERNETES_CONFIG_FILE_NAME}'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=${_STAGING_DEPLOY_ZONE}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=${_STAGING_DEPLOY_CLUSTER}'

# Integration testing
- name: 'node:latest'
  id: Perform integration tests on staging
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    sleep 45s && \
    cd ${_APP_DIR} && npm install && npm run integration-tests

# Production manifest update
- name: 'gcr.io/cloud-builders/gcloud'
  id: Decrypt Github SSH Key for repository
  args:
  - kms
  - decrypt
  - --ciphertext-file=${_GITHUB_REPO_ENC_KEY_PATH}
  - --plaintext-file=/root/.ssh/id_rsa_repo_key
  - --location=global
  - --keyring=${_GITHUB_REPO_KMS_KEYRING}
  - --key=${_GITHUB_REPO_KEY}
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Set up git with key and domain
- name: 'gcr.io/cloud-builders/git'
  id: Add Github Key obtained to local env
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    chmod 600 /root/.ssh/id_rsa_repo_key
    cat <<EOF >/root/.ssh/config
    Hostname github.com
    IdentityFile /root/.ssh/id_rsa_repo_key
    EOF
    echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> /root/.ssh/config
  volumes:
  - name: 'ssh'
    path: /root/.ssh

- name: 'gcr.io/cloud-builders/gcloud'
  id: Clone Repository
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    git clone git@github.com:${_GITHUB_REPO_USERNAME}/$REPO_NAME && \
    cd $REPO_NAME && \
    git checkout ${_PRODUCTION_CANDIDATE_BRANCH} && \
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)')
  volumes:
  - name: 'ssh'
    path: /root/.ssh


# This step generates the new manifest for production
- name: 'gcr.io/cloud-builders/gcloud'
  id: Generate deployment manifest for production environment
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    cd $REPO_NAME && \
    sed "s/IMAGE_TO_DEPLOY/gcr.io\/${PROJECT_ID}\/${_IMAGE_ID}:${SHORT_SHA}/g" ${_PRODUCTION_KUBERENETES_TEMPLATE_FILE_NAME} > ${_PRODUCTION_KUBERNETES_CONFIG_FILE_NAME}
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# This step pushes the manifest back to gcp-cicd-env
- name: 'gcr.io/cloud-builders/gcloud'
  id: Push deployment manifest for production environment
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    cd $REPO_NAME && \
    git add ${_PRODUCTION_KUBERNETES_CONFIG_FILE_NAME} && \
    git commit -m "Deploying image gcr.io/${PROJECT_ID}/${REPO_NAME}:${SHORT_SHA} 
    Built from commit ${COMMIT_SHA} Author: $(git log --format='%an <%ae>' -n 1 HEAD)" || true && \
    git push origin ${_PRODUCTION_CANDIDATE_BRANCH} && \
    git tag 'release-'${SHORT_SHA} || true && \
    git push origin 'release-'${SHORT_SHA}
  volumes:
  - name: 'ssh'
    path: /root/.ssh